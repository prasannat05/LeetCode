import java.util.*;

public class Solution {
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int n = status.length;
        boolean[] visited = new boolean[n];
        boolean[] opened = new boolean[n];
        boolean[] available = new boolean[n];

        for (int i = 0; i < n; i++) {
            if (status[i] == 1) {
                opened[i] = true;
            }
        }

        Queue<Integer> queue = new LinkedList<>();
        for (int box : initialBoxes) {
            available[box] = true;
            if (opened[box]) {
                queue.offer(box);
            }
        }

        int totalCandies = 0;

        while (!queue.isEmpty()) {
            int curr = queue.poll();
            if (visited[curr]) continue;

            visited[curr] = true;
            totalCandies += candies[curr];

            // Use keys found in the current box
            for (int key : keys[curr]) {
                opened[key] = true;
                if (available[key] && !visited[key]) {
                    queue.offer(key);
                }
            }

            // Add new boxes found in the current box
            for (int box : containedBoxes[curr]) {
                available[box] = true;
                if (opened[box] && !visited[box]) {
                    queue.offer(box);
                }
            }
        }

        return totalCandies;
    }
}
